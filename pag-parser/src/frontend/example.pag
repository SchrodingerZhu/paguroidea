lexer {
    // definition in lexer is not a real token, it is just a way to define a set of characters

    definition BLANK = ' ';
    definition DIGIT = '0' .. '9';
    definition ALPHA = 'a' .. 'z' | 'A' .. 'Z';

    token LPAREN = '(';
    token RPAREN = ')';
    token ATOM   = ALPHA ~ (ALPHA | DIGIT)*;

    skip = (BLANK | '\t' | '\n' | '\r')+;
}

// parser must have a entry point
parser sexpr {
    // definition in parser can be a real grammer rule.

    active compound
        = LPAREN ~ sexprs ~ RPAREN;

    active atom
        = ATOM;

    silent sexprs
        = (compound | atom) *;

    active sexpr
        = compound | atom;
}
