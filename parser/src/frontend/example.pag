
lexer {
    // definition in lexer is not a real token, it is just a way to define a set of characters
    definition BLANK     = ' ';
    definition DIGIT     = '0' .. '9';
    definition ALPHA     = 'a' .. 'z' | 'A' .. 'Z';
    active token LPAREN     = '(';
    active token RPAREN     = ')';
    active token ATOM       = ALPHA ~ (ALPHA | DIGIT)*;
    silent token WHITESPACE = (BLANK | '\t' | '\n' | '\r')+;
}

// parser must have a entry point
parser sexpr {
    // definition in parser can be a real grammer rule.

    active definition compound
        = LPAREN ~ sexprs ~ RPAREN;

    active definition atom
        = ATOM;    

    silent fixpoint sexprs
        = _ | (compound | atom) ~ sexprs;

    active fixpoint sexpr
        = compound | atom;
}
